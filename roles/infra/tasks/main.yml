---

- name: Write backend type configuration
  copy:
    content: |
      terraform {
        backend "{{ terraform_backend_type }}" { }
      }
    dest: "{{ terraform_project_path }}/backend.tf"

- name: Set intermediate fact from terraform_backend_config
  # We need this to be sure that we can beat the precedence of
  # of terraform_backend_config in the next block, even if it
  # is supplied as a role param
  set_fact:
    _terraform_backend_config: "{{ terraform_backend_config }}"

- block:
  - name: Warn if force_path_style is used in terraform_backend_config
    # A simple debug.msg isn't obvious in stdout, so fail and ignore the
    # failure.
    fail:
      msg: >-
        The terraform_backend_config.force_path_style configuration
        option is deprecated and terraform_backend_config.use_path_style
        should be used instead!
    ignore_errors: true

  - name: Rename force_path_style to use_path_style
    set_fact:
      _terraform_backend_config: >-
        {{
          terraform_backend_config |
          dict2items |
          rejectattr('key', 'eq', 'force_path_style') |
          items2dict |
          combine({'use_path_style': terraform_backend_config.force_path_style})
        }}
  when:
    - terraform_backend_type is defined and terraform_backend_type == 's3'
    - terraform_backend_config.force_path_style is defined
    - not terraform_disable_s3_force_path_style_checks

- name: Write backend configuration options
  copy:
    content: "{{ _terraform_backend_config | to_json }}"
    dest: "{{ terraform_project_path }}/backend_config.json"

- name: Set terraform to rebuild patched appliances
  include_tasks: rebuild.yml
  when:
    - terraform_rebuild_appliance == 'patch'
    - not terraform_readonly

- name: Provision infrastructure using Terraform
  terraform:
    binary_path: "{{ terraform_binary_path or omit }}"
    project_path: "{{ terraform_project_path }}"
    state: "{{ terraform_state }}"
    backend_config_files:
      - "{{ terraform_project_path }}/backend_config.json"
    force_init: yes
    init_reconfigure: yes
    variables: "{{ terraform_variables }}"
  register: terraform_provision_state
  when: not terraform_readonly

- name: Get outputs from Terraform state
  block:
    - name: Initialise Terraform
      command: >-
        {{ terraform_binary_path | default('terraform', True) }}
          -chdir="{{ terraform_project_path }}"
          init
          -input=false
          -reconfigure
          -backend-config="{{ terraform_project_path }}/backend_config.json"

    - name: Pull Terraform state
      command: >-
        {{ terraform_binary_path | default('terraform', True) }}
          -chdir="{{ terraform_project_path }}"
          state
          pull
      register: terraform_state_pull

    - name: Set Terraform provision state fact
      set_fact:
        terraform_provision_state: "{{ terraform_state_pull.stdout | from_json }}"
  when: terraform_readonly

- name: Wait for rebuilt clusters to re-initialise
  pause:
    minutes: 2
  when: terraform_rebuild_appliance == 'patch'

- name: Populate in-memory inventory
  include_tasks: inventory_adopt.yml
  when: 
    - terraform_state == 'present'
    - terraform_adopt_inventory
